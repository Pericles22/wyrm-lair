[gd_scene load_steps=16 format=2]

[ext_resource path="res://scenes/characters/enemy/Enemy.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/characters/enemy/BlueSnake.gd" type="Script" id=2]
[ext_resource path="res://assets/enemies/blue-snake/slither-01.png" type="Texture" id=3]
[ext_resource path="res://assets/enemies/blue-snake/bite-01.png" type="Texture" id=4]
[ext_resource path="res://assets/enemies/blue-snake/bite-02.png" type="Texture" id=5]
[ext_resource path="res://assets/enemies/blue-snake/bite-03.png" type="Texture" id=6]
[ext_resource path="res://assets/enemies/blue-snake/bite-04.png" type="Texture" id=7]
[ext_resource path="res://assets/enemies/blue-snake/slither-02.png" type="Texture" id=8]
[ext_resource path="res://assets/enemies/blue-snake/slither-03.png" type="Texture" id=9]
[ext_resource path="res://assets/enemies/blue-snake/slither-04.png" type="Texture" id=10]
[ext_resource path="res://assets/enemies/blue-snake/slither-05.png" type="Texture" id=11]
[ext_resource path="res://assets/enemies/blue-snake/slither-06.png" type="Texture" id=12]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity : hint_range(0,200); 
uniform float precision : hint_range(0,0.02);
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a){
					final_color = outline_color;
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/intensity = 25
shader_param/precision = 0.02
shader_param/outline_color = Color( 0.752941, 0.905882, 1, 1 )

[sub_resource type="SpriteFrames" id=3]
animations = [ {
"frames": [ ExtResource( 3 ) ],
"loop": false,
"name": "idle",
"speed": 0.0
}, {
"frames": [ ExtResource( 4 ), ExtResource( 5 ), ExtResource( 6 ), ExtResource( 7 ), ExtResource( 4 ), ExtResource( 4 ), ExtResource( 4 ), ExtResource( 4 ), ExtResource( 4 ), ExtResource( 4 ), ExtResource( 4 ), ExtResource( 4 ) ],
"loop": true,
"name": "attack",
"speed": 12.0
}, {
"frames": [ ExtResource( 3 ), ExtResource( 8 ), ExtResource( 9 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 12 ) ],
"loop": true,
"name": "move",
"speed": 12.0
} ]

[node name="Enemy" index="0" instance=ExtResource( 1 )]
script = ExtResource( 2 )

[node name="CollisionShape2D" parent="." index="0"]
visible = false

[node name="DetectRadius" parent="." index="1"]
visible = false

[node name="AttackRadius" parent="." index="2"]
visible = false

[node name="AtCurrentPos" parent="." index="8"]
visible = false

[node name="AnimatedSprite" type="AnimatedSprite" parent="." index="9"]
material = SubResource( 2 )
frames = SubResource( 3 )
animation = "move"

[connection signal="change_health" from="." to="HUD" method="change_health"]
